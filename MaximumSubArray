/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

https://oj.leetcode.com/problems/maximum-subarray/
*/


public class Solution {

    // Note: This is the version that subarray cannot be empty.
    public int maxSubArray1(int[] A) {
        int maxSum = A[0];
        int sum = A[0];
        for (int i = 1; i < A.length; i++) {
            sum = Math.max(A[i], sum + A[i]);
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }
    // Note: This is the version that subarray can be empty
    public int maxSubArray2(int[] A) {
        int maxSum = 0;
        int sum = 0;
        for (int i = 0; i < A.length; i++) {
            sum = Math.max(0, sum + A[i]);
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }
}
